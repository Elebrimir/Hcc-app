name: Version Bump

on:
  push:
    branches:
      - main
    paths:
      - "lib/**"
  workflow_dispatch:
    inputs:
      bump:
        description: "Tipo de incremento (patch, minor, major)"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  bump-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Dart
        uses: dart-lang/setup-dart@v1

      - name: Determine bump type
        id: bump-type
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "type=${{ github.event.inputs.bump }}" >> $GITHUB_OUTPUT
            echo "Usando tipo de bump especificado manualmente: ${{ github.event.inputs.bump }}"
          else
            # Obtener los archivos nuevos agregados en el último commit
            NEW_FILES=$(git diff --name-only --diff-filter=A HEAD~1 HEAD | grep -E '^lib/' || echo "")

            # Contar archivos nuevos en categorías específicas
            NEW_MODELS_PAGES_TESTS=$(echo "$NEW_FILES" | grep -E 'lib/(models|pages|test)/' | wc -l)
            TOTAL_NEW_FILES=$(echo "$NEW_FILES" | wc -l)

            # Determinar tipo de bump
            if [ "$TOTAL_NEW_FILES" -gt 1 ]; then
              BUMP_TYPE="major"
              echo "Más de 1 archivo nuevo detectado: MAJOR bump"
            elif [ "$NEW_MODELS_PAGES_TESTS" -eq 1 ]; then
              BUMP_TYPE="minor"
              echo "1 archivo nuevo en models, pages o test: MINOR bump"
            else
              BUMP_TYPE="patch"
              echo "Solo modificaciones detectadas: PATCH bump"
            fi

            echo "type=$BUMP_TYPE" >> $GITHUB_OUTPUT
            echo "Tipo de bump determinado automáticamente: $BUMP_TYPE"
          fi

          # Obtener el mensaje del último commit para el CHANGELOG
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "commit_message<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Read current version
        id: current-version
        run: |
          VERSION=$(grep -E '^version: ' pubspec.yaml | awk '{print $2}' | cut -d'+' -f1)
          BUILD=$(grep -E '^version: ' pubspec.yaml | awk '{print $2}' | cut -d'+' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build=$BUILD" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION+$BUILD"

      - name: Bump version
        id: bump-version
        run: |
          BUMP_TYPE="${{ steps.bump-type.outputs.type }}"
          CURRENT_VERSION="${{ steps.current-version.outputs.version }}"
          CURRENT_BUILD="${{ steps.current-version.outputs.build }}"

          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Incrementar según tipo
          if [ "$BUMP_TYPE" == "major" ]; then
            MAJOR=$((MAJOR+1))
            MINOR=0
            PATCH=0
          elif [ "$BUMP_TYPE" == "minor" ]; then
            MINOR=$((MINOR+1))
            PATCH=0
          else
            PATCH=$((PATCH+1))
          fi

          # Incrementar build number
          NEW_BUILD=$((CURRENT_BUILD+1))

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_build=$NEW_BUILD" >> $GITHUB_OUTPUT
          echo "Nueva versión: $NEW_VERSION+$NEW_BUILD"

      - name: Update pubspec.yaml
        run: |
          sed -i "s/^version: .*/version: ${{ steps.bump-version.outputs.new_version }}+${{ steps.bump-version.outputs.new_build }}/" pubspec.yaml
          cat pubspec.yaml | grep version

      - name: Update CHANGELOG.md
        run: |
          DATE=$(date +%Y-%m-%d)
          COMMIT_MSG="${{ steps.bump-type.outputs.commit_message }}"

          # Crear una entrada nueva con la versión y el mensaje del commit
          NEW_ENTRY="## [${{ steps.bump-version.outputs.new_version }}] - ${DATE}\n\n${COMMIT_MSG}\n"
          ESCAPED_NEW_ENTRY=$(printf '%s\n' "$NEW_ENTRY" | sed 's/[&/\]/\\&/g')

          # Insertar después de "## [No publicado]"
          sed -i "0,/## \[No publicado\]/s//## [No publicado]\n\n${ESCAPED_NEW_ENTRY}/" CHANGELOG.md
          cat CHANGELOG.md

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pubspec.yaml CHANGELOG.md
          git commit -m "Bump version to ${{ steps.bump-version.outputs.new_version }}+${{ steps.bump-version.outputs.new_build }}"
          git push
