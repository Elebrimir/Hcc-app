name: Version Bump

on:
  push:
    branches:
      - main
    paths:
      - "lib/**"
      - "test/**"
      - "widgets/**"
  workflow_dispatch:
    inputs:
      bump:
        description: "Tipo de incremento (patch, minor, major)"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  bump-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Dart
        uses: dart-lang/setup-dart@v1

      - name: Determine bump type
        id: bump-type
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "type=${{ github.event.inputs.bump }}" >> $GITHUB_OUTPUT
            echo "Usando tipo de bump especificado manualmente: ${{ github.event.inputs.bump }}"
          else
            # Obtener los archivos nuevos agregados en el último commit
            NEW_FILES=$(git diff --name-only --diff-filter=A HEAD~1 HEAD | grep -E '^lib/' || echo "")

            # Contar archivos nuevos en categorías específicas
            NEW_MODELS_PAGES_TESTS=$(echo "$NEW_FILES" | grep -E 'lib/(models|pages|widgets)/' | wc -l)
            TOTAL_NEW_FILES=$(echo "$NEW_FILES" | wc -l)

            # Determinar tipo de bump
            if [ "$TOTAL_NEW_FILES" -gt 1 ]; then
              BUMP_TYPE="major"
              echo "Más de 1 archivo nuevo detectado: MAJOR bump"
            elif [ "$NEW_MODELS_PAGES_TESTS" -eq 1 ]; then
              BUMP_TYPE="minor"
              echo "1 archivo nuevo en models, pages, widgets: MINOR bump"
            else
              BUMP_TYPE="patch"
              echo "Solo modificaciones detectadas o tests añadidos: PATCH bump"
            fi

            echo "type=$BUMP_TYPE" >> $GITHUB_OUTPUT
            echo "Tipo de bump determinado automáticamente: $BUMP_TYPE"
          fi

          # Obtener el mensaje del último commit para el CHANGELOG
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "commit_message<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Read current version
        id: current-version
        run: |
          VERSION=$(grep -E '^version: ' pubspec.yaml | awk '{print $2}' | cut -d'+' -f1)
          BUILD=$(grep -E '^version: ' pubspec.yaml | awk '{print $2}' | cut -d'+' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build=$BUILD" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION+$BUILD"

      - name: Bump version
        id: bump-version
        run: |
          BUMP_TYPE="${{ steps.bump-type.outputs.type }}"
          CURRENT_VERSION="${{ steps.current-version.outputs.version }}"
          CURRENT_BUILD="${{ steps.current-version.outputs.build }}"

          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Incrementar según tipo
          if [ "$BUMP_TYPE" == "major" ]; then
            MAJOR=$((MAJOR+1))
            MINOR=0
            PATCH=0
          elif [ "$BUMP_TYPE" == "minor" ]; then
            MINOR=$((MINOR+1))
            PATCH=0
          else
            PATCH=$((PATCH+1))
          fi

          # Incrementar build number
          NEW_BUILD=$((CURRENT_BUILD+1))

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_build=$NEW_BUILD" >> $GITHUB_OUTPUT
          echo "Nueva versión: $NEW_VERSION+$NEW_BUILD"

      - name: Update pubspec.yaml
        run: |
          sed -i "s/^version: .*/version: ${{ steps.bump-version.outputs.new_version }}+${{ steps.bump-version.outputs.new_build }}/" pubspec.yaml
          cat pubspec.yaml | grep version

      - name: Update CHANGELOG.mdç
        env:
          COMMIT_MSG_ENV: ${{ steps.bump-type.outputs.commit_message }}
        run: |
          DATE=$(date +%Y-%m-%d)
          RAW_COMMIT_MSG="COMMIT_MSG_ENV"
          # 1. Procesar el mensaje del commit: Convertir '\n' literal en saltos de línea reales
          #    Usamos printf '%b' que interpreta las secuencias de escape como \n, \t, etc.
          COMMIT_MSG=$(printf '%b' "$RAW_COMMIT_MSG")
          # 2. Preparar la línea de cabecera para la nueva entrada
          HEADER_LINE="## [${{ steps.bump-version.outputs.new_version }}] - ${DATE}"
          # 3. Usar awk para insertar la nueva entrada con el formato correcto
          #    - Se pasan las variables header y msg a awk de forma segura con -v
          #    - Busca la línea que empieza con "## [No publicado]" (escapando los corchetes)
          #    - Cuando la encuentra (y solo la primera vez, usando el flag 'inserted'):
          #      - Imprime la línea original "## [No publicado]"
          #      - Imprime una línea en blanco
          #      - Imprime la línea de cabecera nueva (HEADER_LINE)
          #      - Imprime otra línea en blanco
          #      - Imprime el mensaje del commit ya procesado (COMMIT_MSG)
          #      - Pone el flag inserted=1 y salta al siguiente ciclo (next)
          #    - Para todas las demás líneas, simplemente las imprime (print $0)
          #    - Se redirige la salida a un archivo temporal y luego se reemplaza el original
          awk -v header="$HEADER_LINE" -v msg="$COMMIT_MSG" '
          BEGIN { inserted=0 }
          /## \[No publicado\]/ && !inserted {
            print $0;        # Imprime "## [No publicado]"
            print "";        # Imprime línea en blanco
            print header;    # Imprime "## [x.y.z] - YYYY-MM-DD"
            print "";        # Imprime línea en blanco
            print msg;       # Imprime el mensaje procesado (con saltos de línea reales)
            inserted=1;      # Marca como insertado
            next             # Pasa a la siguiente línea del input sin imprimirla por defecto
          }
          { print $0 }       # Imprime cualquier otra línea
          ' CHANGELOG.md > CHANGELOG.md.new && mv CHANGELOG.md.new CHANGELOG.md
          echo "--- Updated CHANGELOG.md ---"
          cat CHANGELOG.md
          echo "----------------------------"

      - name: Create Pull Request for Version Bump
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Definir variables útiles
          NEW_VERSION_FULL="${{ steps.bump-version.outputs.new_version }}+${{ steps.bump-version.outputs.new_build }}"
          BRANCH_NAME="bump/version-${NEW_VERSION_FULL}" # Nombre para la nueva rama
          COMMIT_MSG="Bump version to ${NEW_VERSION_FULL}" # Mensaje de commit
          PR_TITLE="${COMMIT_MSG}" # Título para la PR
          # Cuerpo para la PR (usaremos el mensaje procesado del commit original)
          RAW_COMMIT_MSG="${{ steps.bump-type.outputs.commit_message }}"
          PR_BODY=$(printf '%b' "$RAW_COMMIT_MSG")
          echo "Configurando Git..."
          git config --local user.email "action@github.com"
          # Puedes poner un nombre más descriptivo si quieres
          git config --local user.name "GitHub Action Bot [version bump]"
          echo "Creando y cambiando a la nueva rama: ${BRANCH_NAME}"
          git checkout -b ${BRANCH_NAME}
          echo "Añadiendo y haciendo commit de los cambios..."
          git add pubspec.yaml CHANGELOG.md
          # Verifica si hay cambios antes de hacer commit para evitar errores si no hay nada que commitear
          if git diff --staged --quiet; then
            echo "No hay cambios para hacer commit."
          else
            git commit -m "${COMMIT_MSG}"
          fi
          echo "Subiendo la nueva rama ${BRANCH_NAME}..."
          # --set-upstream para enlazar la rama local con la remota la primera vez
          git push --set-upstream origin ${BRANCH_NAME}
          echo "Creando Pull Request..."
          # Usamos la CLI de GitHub (gh) que está preinstalada en los runners
          gh pr create \
            --base main \
            --head ${BRANCH_NAME} \
            --title "${PR_TITLE}" \
            --body "${PR_BODY}"
          echo "Pull Request creada."
